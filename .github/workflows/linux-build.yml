name: Linux Build
on:
  workflow_dispatch:
permissions: write-all

jobs:
  change-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version
        id: outputstep
        run: |
          echo "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')"

  build-for-linux:
    needs: [change-version]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04]
        include:
          - platform: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            toolchain: stable-x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Build for Linux
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          INPUT_TARGET: ${{ matrix.target }}
          INPUT_TOOLCHAIN: ${{ matrix.toolchain }}
        run: |
          # 安装依赖
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb1 libxrandr2 libdbus-1-3

          # 确保使用兼容的 C 库
          sudo apt-get install -y libc6-dev

          # 构建应用
          pnpm install
          sed -i "s/#openssl/openssl={version=\"0.10\",features=[\"vendored\"]}/g" src-tauri/Cargo.toml

          # 设置环境变量，使用兼容的编译选项
          export RUSTFLAGS="-C target-feature=-crt-static"

          # 仅打包 deb 文件
          pnpm tauri build --target $INPUT_TARGET -b deb
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_${{ matrix.target }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      # 仅上传 deb 文件，移除 AppImage 相关的上传步骤

      # 发布到 GitHub Releases
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Pot Desktop ${{ needs.change-version.outputs.version }} for Deepin"
          tag_name: deepin-${{ needs.change-version.outputs.version }}
          generate_release_notes: true
