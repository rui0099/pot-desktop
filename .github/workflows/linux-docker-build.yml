name: Linux Docker Build
on:
  workflow_dispatch:
permissions: write-all

jobs:
  change-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version
        id: outputstep
        run: |
          echo "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')"

  build-for-linux:
    needs: [change-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build in Docker
        run: |
          # 创建 Dockerfile
          cat > Dockerfile << 'EOF'
          FROM debian:buster

          # 安装基本工具
          RUN apt-get update && apt-get install -y \
              curl \
              wget \
              git \
              build-essential \
              pkg-config \
              libssl-dev \
              libgtk-3-dev \
              libwebkit2gtk-4.0-dev \
              libappindicator3-dev \
              librsvg2-dev \
              patchelf \
              libxdo-dev \
              libxcb1 \
              libxrandr2 \
              libdbus-1-3

          # 安装 Rust
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # 安装 Node.js 和 pnpm
          RUN curl -fsSL https://nodejs.org/dist/v18.19.1/node-v18.19.1-linux-x64.tar.xz | tar -xJ -C /usr/local --strip-components=1
          RUN npm install -g pnpm@8

          # 设置工作目录
          WORKDIR /app

          # 复制项目文件
          COPY . .

          # 构建应用
          RUN pnpm install
          # 降级 Vite 版本以解决 crypto.getRandomValues 问题
          RUN pnpm add vite@4.5.2 -D
          RUN sed -i "s/#openssl/openssl={version=\"0.10\",features=[\"vendored\"]}/g" src-tauri/Cargo.toml
          RUN rustup target add x86_64-unknown-linux-gnu
          # 设置环境变量
          ENV NODE_OPTIONS="--openssl-legacy-provider"
          ENV RUSTFLAGS="-C target-feature=-crt-static"
          RUN pnpm tauri build --target x86_64-unknown-linux-gnu -b deb
          EOF

          # 构建 Docker 镜像并运行
          docker build -t pot-build .

          # 从容器中复制 deb 文件
          docker create --name pot-container pot-build
          docker cp pot-container:/app/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb ./deb
          docker rm pot-container

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86_64-unknown-linux-gnu
          path: deb/*.deb
          if-no-files-found: error

      # 发布到 GitHub Releases
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          files: deb/*.deb
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Pot Desktop ${{ needs.change-version.outputs.version }} for Deepin (Docker Build)"
          tag_name: deepin-docker-${{ needs.change-version.outputs.version }}
          generate_release_notes: true
